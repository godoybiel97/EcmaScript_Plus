ECMASCRIPT 6+
-------------
Esse conteúdo aborda as atualizações do EcmaScript entre os anos de 2015 e 2021, sendo eles:
    - ES 6: 2015
    - ES 7: 2016
    - ES 8: 2017
    - ES 9: 2018
    - ES 10: 2019
    - ES 11: 2020
    - ES 12: 2021


ECMASCRIPT-6 (2015)
-------------------
- Generators: são funções especiais que podem ser executadas, pausadas e continuadas, porém, não é muito usual
    - function* generator() {}: essa função sempre será acompanhada por *

    - O uso do yeld está atrelado a função next():
        - function* generator() {
            yeld "Algum valor"
        }
        let meuGenerator = generator()
        meuGenerator.next()

        - next(): executa o valor que yeld indica e o valor anterior


- Promises: é um objeto utilizado para solucionar processamentos assíncronos, cujo valor pode estar disponível agora, no futuro ou nunca 
    - Esse conceito tende a substituir as funções callbacks, porém, elas ainda podem ser utilizadas
        - É comum, e mais usual, utilizar esse fundamento em requisições HTTPS ou APIs

    - Recebe dois parâmetros: new Promise((resolve, reject) => {}):
        - resolve(): retorno de sucesso
        
        - reject(): retorno rejeitado

    - Apresenta 3 status:
        - Pending: enquanto resolve ou reject são executados a promise permanece pendente

        - Fulfilled: quando há sucesso na operação (concluída)

        - Rejected: quando há falha na operação (rejeitada)

    - Utiliza tentativa e erro, podendo precaver de erros inesperados:
        - new Promise((resolve, reject) => {
            try {
                //Código
                throw new Error("Erro inesperado")

                //Código
                resolve("Sucesso")
            }
            catch(error) {
                //Código
                reject(error)
            }
        })

        - then(): é utilizado para dar sequência no código que retornar como sucesso. Automaticamente ele captura a solução de resolve() e retorna seu valor
            - .then(dados => {
                console.log(dados)
            })

            - Quando utilizado vários then(), é possível passar como parâmetro o retorno do then() anterior:
                - .then(dados => {
                    console.log(dados)
                    return "Parâmetro"
                }). then(param => {
                    //O valor será Parâmetro
                    console.log(param)
                })

            - Não é comum e usual usar muitas sequências de then()


ECMASCRIPT-7 (2016)
-------------------
- Array.prototype.includes: é um método para facilitar a verificação de um determinado valor dentro de um array
    - Utilizando o método find(): é necessário uma função callback para percorrer os índices
        let array = ["Abacaxi", "Banana", "Cereja"]
        let retorno1 = array.find(item => item == "Abacaxi")
        console.log(`O valor é encontrado: ${retorno1}`)

        let retorno2 = array.find(item => item == "Abacate")
        console.log(`O valor não é encontrado, logo é undefined: ${retorno2}`)

    - Utilizando o método includes: retorna true ou false e apenas exige o valor que deve ser procurado
        let retorno3 = array.includes("Abacaxi")
        console.log(`O valor é verdadeiro: ${retorno3}`)

        let retorno4 = array.includes("Abacaxi")
        console.log(`O valor é falso: ${retorno4}`)


- Operador exponencial: é uma nova feature, visto que antigamente era utilizada a classe Math
    - let resultado = Math.pow(base, expoente)

    - let resultado = base ** expoente


- Async/ await: permite trabalhar com funções assíncronas de maneira sequencial, é muito utilizada em requisições HTTPS
    - Permitem ordenar as execuções de acordo com a ordem de prioridade de resposta:
      
    - Têm como característica serem definidas antes da palavra reservada "function":
        - async function minhaFuncao()

        - await nomeVariavel ou nomeFuncao


ECMASCRIPT-8 (2017)
-------------------
- Object.values: permite retornar um array com base nos valores das propriedades de um objeto
    - Cada atributo torna-se um índice numerado como característica de um array

    - let objeto = ()
      Object.values(objeto)


- Object.entries: permite retornar um array numerado trazendo os atributos do objeto como chave e valor posicionados em índices
    - let objeto = {
        nome: "Gabriel",
        sobreNome: "Godoy",
        idade: 26,
    }
    Object.entries(objeto)


- Object.getOwnPropertyDescriptors: permite analisar os descritores de propriedades de um determinado objeto
    - let objeto = {}
    Object.getOwnPropertyDescriptors(objeto)

    - Após utiliza-lo, ele retorna mais 3 propriedades além das já existem:
        - Configurable: quando definido como false, o valor das propriedades não poderão ser deletadas

        - Enumerable: quando definido como false, o valor das propriedades não serão exibidas em laços de repetição

        - Writable: quando definido como false, o valor das propriedades não poderão ser modificadas


- String padStart e padEnd: métodos estáticos utilizados para strings
    - padStart: adiciona caracteres à esquerda da string já definida
        - let codigo = "1000"
        codigo = codigo.padStart(quantidade de caracteres, caracter a ser utilizado)

    - padEnd: adiciona caracteres à direita da string já definida
        - let codigo = "1000"
        codigo = codigo.padEnd(quantidade de caracteres, caracter a ser utilizado)



ECMASCRIPT-9 (2018)
-------------------
- Asynchronous iteration: é uma forma de combinar o uso de async e await em laços de repetição
    - É utilizado o mesmo conceito de assincronismo, porém, armazenando uma função assíncrona numa variável executável


- Promise finally: esse é método pode ser utilizado para Promises resolvidas e rejeitadas
    - Ele tem como função concluir ambos os métodos, por conta disso ele não recebe parâmetro, como por exemplo o then e catch

    - let p = new Promise((resolve, reject) => {
        if(true) {
            reject("Rejeitada")
        }
        resolve()
    }).then((sucesso) => console.log(sucesso))
    .catch((falha) => console.log(falha))
    .finally(() => {console.log("Fluxo rejeitado ou resolvido")})



ECMASCRIPT-10 (2019)
-------------------
- Array flat: é utilizado para tornar array multidimensionais em lineares
    - Ele recebe um parâmetro que significa o nível de profundidade das dimensões dos arrays

    - let array = [1, 2, 3, 4, [5, 6, 7, 8], 9, 10, [11, 12, [13, 14, [15, 16]]]]
    let array2 = array.flat(3)


- Array flatmap: é a combinação dos métodos map e flat, percorrendo cada item dimensional e retornando um array nivelado
    - Vale lembrar que o flatMap combina um nível de profundidade


- Strings trimStart e trimEnd: são métodos exclusivos de strings
    - trimStart: recorta caracteres à esquerda
        - let texto = "     texto"
        texto.trimStart()

    - trimEnd: recorta caracteres à direita
        - let texto = "texto     "
        texto.trimEnd()


- Object.fromEntries: é um método que permite transformar array em objeto
    - Nessa versão do ES não há suporte para arrays associativos, por isso esse método funciona com arrays que têm a característica de chave e valor

    - Object.fromEntries(algumArray)


- Function toString: esse método está presente em todos os objetos e é herdado de Object.prototype
    - Pode ser utilizado para retornar elementos textuais e sobrescrever métodos

    - Utilizando somente o método toString() ele retorna um objeto em questão e o seu tipo:
        [object Object] / [object Math]

    - class Carro {
        constructor(marca, modelo) {
            this.marca = marca,
            this.modelo = modelo
        }
        toString() {
            return `Um carro da marca ${this.marca} e modelo ${this.modelo}`
        }
    }
    let carro = new Carro("Jeep", "Renegade")


- Catch com parâmetro opcional: a exceção de erro que era utilizada não é mais obrigatório
    - Antes: try {
        throw "Um erro"
    } catch(error) {
        console.log(error)
    }

    - Depois: try {
        throw "Um erro"
    } catch {
        console.log("Fim !")
    }
